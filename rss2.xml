<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>zerone</title>
    <link>https://eui-young.github.io/</link>
    
    <atom:link href="https://eui-young.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>알아내보자</description>
    <pubDate>Wed, 10 Jan 2024 05:22:46 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Garbage Collector</title>
      <link>https://eui-young.github.io/2024/01/09/2024-01-09-[C]-Garbage-Collector/</link>
      <guid>https://eui-young.github.io/2024/01/09/2024-01-09-[C]-Garbage-Collector/</guid>
      <pubDate>Mon, 08 Jan 2024 15:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;C-Garbage-Collector-란&quot;&gt;&lt;a href=&quot;#C-Garbage-Collector-란&quot; class=&quot;headerlink&quot; title=&quot;[C#] Garbage Collector 란?&quot;&gt;&lt;/a&gt;[C#] Garbage Collec</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="C-Garbage-Collector-란"><a href="#C-Garbage-Collector-란" class="headerlink" title="[C#] Garbage Collector 란?"></a>[C#] Garbage Collector 란?</h2><p>Garbage Collector란 가비지 컬렉터라고 하며 GC라고 부르기도 합니다.</p><p>GC는 CLR(공용 언어 런타임)에서 제공하는 자동 메모리 관리 소프트웨어입니다.</p><p>C#으로 작성한 소스 코드를 컴파일해서 실행 파일을 만들고 실행하면,</p><p>CLR은 프로그램을 위해 메모리를 확보합니다.</p><p>메모리의 공간을 확보해서 관리되는 힙 메모리를 마련합니다.</p><blockquote> 힙 메모리의 첫 번째 주소에 다음 객체를 할당할 메모리의 포인터를 위치시킵니다. </blockquote><p>각 프로세스는 가상주소공간을 포함합니다.</p><p>이 때, 가상 주소 공간은 조각화될 수 있는데</p><p>가비지 컬렉터는 객체를 할당할 수 있는 블록을 찾게 됩니다.</p><hr><h2 id="GC가-메모리를-관리하는-방법"><a href="#GC가-메모리를-관리하는-방법" class="headerlink" title="GC가 메모리를 관리하는 방법"></a>GC가 메모리를 관리하는 방법</h2><p>데이터가 할당된 메모리의 위치를 참조하는 객체를 <markdown style = "background : #f4acb7">루트</markdown>라고 합니다.</p><p>JIT 컴파일러는 이 루트들을 그래프로 만들고 CLR은 루트 목록을 관리하며 상태를 갱신하다.</p><blockquote> 애플리케이션 루트에는 정적 필드, 스레드 스택의 지역 변수, CPU 레지스터, GC핸들, finalize 큐가 포함됩니다.</blockquote></br><p>GC는 루트목록을 참조하며 힙을 차지하고 있는 쓰레기(힙 메모리를 차지하고 있으나 이를 참조하는 데이터가 없는 개체)들을 수집합니다.</p><hr><h2 id="GC-동작-순서"><a href="#GC-동작-순서" class="headerlink" title="GC 동작 순서"></a>GC 동작 순서</h2><ol><li>작업을 진행하기 전, GC는 모든 객체가 쓰레기라고 가정합니다.</li></ol><blockquote> 루트 목록은 그래프로 관리를 하니, 그래프에 없는 개체라고 생각하시면 됩니다.</blockquote></br><ol start="2"><li><p>루트 목록 내 어떤 루트도 메모리를 가리키지 않는다고 가정합니다.</p></li><li><p>루트 목록을 순회하면서 각 루트가 참조하고 있는 힙 개체와의 관계 여부를 조사합니다.</p></li><li><p>어떤 루트와도 관계가 없는 힙의 개체들은 쓰레기로 간주합니다.</p></li><li><p>쓰레기 개체가 가지고 있던 메모리는 이제 비어 있는 공간이 됩니다.</p></li><li><p>비어 있는 공간에 개체를 이동시켜 채워넣습니다.</p></li></ol><hr><h2 id="GC-메모리-정리-순서"><a href="#GC-메모리-정리-순서" class="headerlink" title="GC 메모리 정리 순서"></a>GC 메모리 정리 순서</h2><ol><li><p>가비지 컬렉터는 메모리를 할당하고 있는 개체들을 3개의 세대로 나눕니다. (0세대, 1세대, 2세대)</p></li><li><p>0세대는 나이가 적은 개체, 2세대는 나이가 많은 데이터를<br>위치시킵니다.</p></li></ol><blockquote> 나이는 가비지 컬렉션을 겪은 횟수로 정해집니다.</blockquote></br><ol start="3"><li>가비지 컬렉터는 0세대를 위주로 개체 회수를 진행합니다.</li></ol><p>0세대에서 개체가 회수되지 않았다면 다음 세대로 넘어가게 됩니다.</p><hr><h2 id="GC-호출-시기"><a href="#GC-호출-시기" class="headerlink" title="GC 호출 시기"></a>GC 호출 시기</h2><ol><li><p>엔진은 수집을 수행하기에 가장 적합한 시간을 결정하고, 시간에 맞춰 주기적으로 GC를 호출합니다.</p></li><li><p>시스템의 실제 메모리가 부족한 경우 호출합니다.</p></li><li><p>할당된 개체에 사용되는 힙 메모리가 허용하는 임계값을 초과한 경우 호출합니다. (3개의 세대 중 한 세대의 잔존율이 높을 경우 해당 세대의 할당 임계값을 늘립니다.)</p></li><li><p>GC.Collect 메소드를 호출하여 호출하기도 하지만 GC는 주기적으로 호출되므로 수동으로 호출할 필요는 없습니다.</p></li></ol><h2 id="GC-수행-작업"><a href="#GC-수행-작업" class="headerlink" title="GC 수행 작업"></a>GC 수행 작업</h2><ol><li><p>모든 활성 개체를 찾아 루트 목록을 만드는 표시 작업</p></li><li><p>압축될 개체에 대한 참조를 업데이트 하는 재배치 작업</p></li><li><p>비활성 개체에 의해 점유된 공간을 회수하고 남은 개체를 압축하는 압축작업</p></li></ol>]]></content:encoded>
      
      
      <category domain="https://eui-young.github.io/categories/C/">C#</category>
      
      
      <category domain="https://eui-young.github.io/tags/C/">C#</category>
      
      <category domain="https://eui-young.github.io/tags/Garbage-Collector/">Garbage Collector</category>
      
      
      <comments>https://eui-young.github.io/2024/01/09/2024-01-09-[C]-Garbage-Collector/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Singleton Pattern</title>
      <link>https://eui-young.github.io/2024/01/05/2024-01-05-[Unity]-Singleton-Pattern/</link>
      <guid>https://eui-young.github.io/2024/01/05/2024-01-05-[Unity]-Singleton-Pattern/</guid>
      <pubDate>Thu, 04 Jan 2024 15:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;Singleton-Pattern-이란&quot;&gt;&lt;a href=&quot;#Singleton-Pattern-이란&quot; class=&quot;headerlink&quot; title=&quot;Singleton Pattern 이란?&quot;&gt;&lt;/a&gt;Singleton Pattern 이란?&lt;/h2</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="Singleton-Pattern-이란"><a href="#Singleton-Pattern-이란" class="headerlink" title="Singleton Pattern 이란?"></a>Singleton Pattern 이란?</h2><p>싱글톤 패턴이란 객체의 인스턴스가 오직 1개만 생성되는 패턴입니다.</p><p>즉, 런타임 동안 메모리에 오직 하나의 인스턴스만 존재하는 것을 의미합니다.</p><p>싱글톤 패턴의 주요 목적은 유일성을 보장하는 것입니다.</p><p>그러므로 일관되고 유일하며 전역적으로 접근할 수 있는 시스템을 관리하는 클래스에 사용할 경우 도움됩니다.</p><hr><h2 id="Singleton-Pattern의-구성"><a href="#Singleton-Pattern의-구성" class="headerlink" title="Singleton Pattern의 구성"></a>Singleton Pattern의 구성</h2><p><img src="https://github.com/eui-young/eui-young.github.io/assets/56330520/2c51abc3-c3ef-4bc8-bbd8-3d979ee3dcf9" alt="Singleton Pattern"></p><ol><li>static 인스턴스를 생성하여 메모리에 할당해 둡니다.</li><li>생성되어 있는 인스턴스를 Client들이 접근합니다.</li><li>이미 인스턴스가 생성되어 있는 경우 같은 유형의 인스턴스가 발견되면 삭제합니다.</li></ol><hr><h2 id="Singleton-구현"><a href="#Singleton-구현" class="headerlink" title="Singleton 구현"></a>Singleton 구현</h2><p>[Singleton Class]</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Singleton</span> &lt;<span class="title">T</span>&gt; : <span class="title">MonoBehaviour</span> <span class="keyword">where</span> <span class="title">T</span> : <span class="title">Component</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> T instance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> T Instance</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(instance == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//생성된 오브젝트를 순차적으로 확인하기때문에 주의</span></span><br><span class="line">                instance = FindObjectOfType&lt;T&gt;();</span><br><span class="line">                <span class="keyword">if</span>(instance == <span class="literal">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    GameObject obj = <span class="keyword">new</span> GameObject();</span><br><span class="line">                    obj.name = <span class="keyword">typeof</span>(T).Name;</span><br><span class="line">                    instance = obj.AddComponent&lt;T&gt;();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//가상 함수로 지정한 경우 파생 클래스에서 재정의가 가능</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Awake</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            instance = <span class="keyword">this</span> <span class="keyword">as</span> T;</span><br><span class="line">            <span class="comment">//static 메서드로 씬 전환이 발생하여도 파괴되지 않는다.</span></span><br><span class="line">            DontDestroyOnLoad(gameObject);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            Destroy(gameObject);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>[GameManager Class]</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.SceneManagement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">GameManager</span> : <span class="title">Singleton</span>&lt;<span class="title">GameManager</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> DateTime _sessionStartTime;</span><br><span class="line">    <span class="keyword">private</span> DateTime _sessionEndTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Start Method</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">TODO:</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> - 플레이어 세이브 로드</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> - 세이브가 없다면 플레이어를 등록 씬으로 리다이렉션</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> - 백엔드 호출하여 일일 챌린지와 보상 획득</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        _sessionStartTime = DateTime.Now;</span><br><span class="line">        Debug.Log(<span class="string">$&quot;Game session start: <span class="subst">&#123;DateTime.Now&#125;</span>&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnApplicationQuit</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        _sessionEndTime = DateTime.Now;</span><br><span class="line">        TimeSpan timeDifference = _sessionEndTime.Subtract(_sessionStartTime);</span><br><span class="line">        Debug.Log(<span class="string">$&quot;Game session ended: <span class="subst">&#123;DateTime.Now&#125;</span>&quot;</span>);</span><br><span class="line">        Debug.Log(<span class="string">$&quot;Game session lasted: <span class="subst">&#123;timeDifference&#125;</span>&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnGUI</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(GUILayout.Button(<span class="string">&quot;Next Scene&quot;</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            SceneManager.LoadScene(SceneManager.GetActiveScene().buildIndex + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="Singleton-Pattern의-장단점"><a href="#Singleton-Pattern의-장단점" class="headerlink" title="Singleton Pattern의 장단점"></a>Singleton Pattern의 장단점</h2><h3 id="장점"><a href="#장점" class="headerlink" title="장점"></a>장점</h3><ol><li>시스템의 전역 접근점을 만들 수 있습니다.</li><li>메모리 자원 낭비를 방지할 수 있습니다.</li></ol><h3 id="단점"><a href="#단점" class="headerlink" title="단점"></a>단점</h3><ol><li>클래스 간의 의존성이 높아지게 됩니다.</li><li>접근하는 객체들을 추적하기가 어려워집니다.</li><li>결합도가 높아지므로 유닛 테스트가 힘들어집니다.</li></ol><hr>]]></content:encoded>
      
      
      <category domain="https://eui-young.github.io/categories/Unity/">Unity</category>
      
      <category domain="https://eui-young.github.io/categories/Unity/Design-Pattern/">Design Pattern</category>
      
      
      <category domain="https://eui-young.github.io/tags/Unity/">Unity</category>
      
      <category domain="https://eui-young.github.io/tags/Singleton/">Singleton</category>
      
      <category domain="https://eui-young.github.io/tags/Design-Pattern/">Design Pattern</category>
      
      
      <comments>https://eui-young.github.io/2024/01/05/2024-01-05-[Unity]-Singleton-Pattern/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>State Pattern</title>
      <link>https://eui-young.github.io/2024/01/05/2024-01-05-[Unity]-State-Pattern/</link>
      <guid>https://eui-young.github.io/2024/01/05/2024-01-05-[Unity]-State-Pattern/</guid>
      <pubDate>Thu, 04 Jan 2024 15:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;State-Pattern-이란&quot;&gt;&lt;a href=&quot;#State-Pattern-이란&quot; class=&quot;headerlink&quot; title=&quot;State Pattern 이란?&quot;&gt;&lt;/a&gt;State Pattern 이란?&lt;/h2&gt;&lt;p&gt;유한한 상태를 관리할 </description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="State-Pattern-이란"><a href="#State-Pattern-이란" class="headerlink" title="State Pattern 이란?"></a>State Pattern 이란?</h2><p>유한한 상태를 관리할 때 사용하는 패턴입니다.<br>구현해야하는 상태가 많을 수록 불안정해지는 경우가 많습니다.</p><p>잘못된 플로우로 흘러가는 경우 원하는 상태로 도달하지 못하는 상황도 발생합니다.</p><p>또 상태를 구현하다보면 다양한 코드가 작성되어 어떤 상태인지 정확하게 파악하기 힘들어지기도 합니다.</p><p>State Pattern을 이용하여 상태를 캡슐화하고 클래스를 간소화하여 유지관리를 용이하게 할 수 있습니다.</p><hr><h2 id="State-Pattern의-구성"><a href="#State-Pattern의-구성" class="headerlink" title="State Pattern의 구성"></a>State Pattern의 구성</h2><p><img src="https://github.com/eui-young/eui-young.github.io/assets/56330520/745254aa-1d8a-4580-9d30-befa461c7a52" alt="State Pattern Diagram"></p><ol><li><p>Context 클래스는 클라이언트가 객체의 내부 상태를 변경할 수 있도록 요청하는 인터페이스인 IState를 정의합니다.</p></li><li><p>Context 클래스는 현재 상태에 대한 정보를 가집니다.</p></li><li><p>IState인터페이스는 상태 클래스인 ConcreteState 클래스가 상속받아 구현합니다.</p></li><li><p>클라이언트는 객체의 상태를 업데이트할 때 Context 객체를 활용하여 원하는 상태로 설정할 것을 요청합니다.</p></li></ol><hr><h2 id="State-Pattern의-구현"><a href="#State-Pattern의-구현" class="headerlink" title="State Pattern의 구현"></a>State Pattern의 구현</h2><p>State Pattern을 구현하기에 앞서 상태들에 대한 정의가 필요합니다.</p><p>저는 캐릭터의 상태로 <code>정지, 걷기, 점프</code> 3가지의 상태를 생각해두었습니다.</p><h3 id="IPlayerState-인터페이스-IState"><a href="#IPlayerState-인터페이스-IState" class="headerlink" title="[IPlayerState 인터페이스] : IState"></a>[IPlayerState 인터페이스] : IState</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IPlayerState</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Handle</span>(<span class="params">PlayerController controller</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="PlayerController-클래스-Context에-상태-전달"><a href="#PlayerController-클래스-Context에-상태-전달" class="headerlink" title="[PlayerController 클래스] : Context에 상태 전달"></a>[PlayerController 클래스] : Context에 상태 전달</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PlayerController</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> maxSpeed = <span class="number">2f</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> jumpPower = <span class="number">2f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> CurrentSpeed &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> Vector3 CurrentDirection &#123;  <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> CurrentJump &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//현재 상태 정보를 위해 각 상태 별로 생성</span></span><br><span class="line">    <span class="keyword">private</span> IPlayerState _walkState, _stopState, _jumpState;</span><br><span class="line">    <span class="keyword">private</span> PlayerStateContext _playerStateContext;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        _playerStateContext = <span class="keyword">new</span> PlayerStateContext(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//각 상태들을 정의</span></span><br><span class="line">        _walkState = gameObject.AddComponent&lt;PlayerWalkState&gt;();</span><br><span class="line">        _stopState = gameObject.AddComponent&lt;PlayerStopState&gt;();</span><br><span class="line">        _jumpState = gameObject.AddComponent&lt;PlayerJumpState&gt;();</span><br><span class="line"></span><br><span class="line">        _playerStateContext.Transition(_stopState);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">region</span> 상태 전이 메서드</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">WalkPlayer</span>(<span class="params">Vector3 direction</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        CurrentDirection = direction;</span><br><span class="line">        _playerStateContext.Transition(_walkState);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">StopPlayer</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        _playerStateContext.Transition(_stopState);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">JumpPlayer</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        _playerStateContext.Transition(_jumpState);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="PlayerStateContext-클래스-Context"><a href="#PlayerStateContext-클래스-Context" class="headerlink" title="[PlayerStateContext 클래스] : Context"></a>[PlayerStateContext 클래스] : Context</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PlayerStateContext</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> IPlayerState CurrentState</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span>; <span class="keyword">set</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> PlayerController _playerController;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PlayerStateContext</span>(<span class="params">PlayerController playerController</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _playerController = playerController;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Transition</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        CurrentState.Handle(_playerController);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Transition</span>(<span class="params">IPlayerState state</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        CurrentState = state;</span><br><span class="line">        CurrentState.Handle(_playerController);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="PlayerWalkState-클래스-ConcreteState"><a href="#PlayerWalkState-클래스-ConcreteState" class="headerlink" title="[PlayerWalkState 클래스] : ConcreteState"></a>[PlayerWalkState 클래스] : ConcreteState</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PlayerWalkState</span> : <span class="title">MonoBehaviour</span>, <span class="title">IPlayerState</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> PlayerController _playerController;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Handle</span>(<span class="params">PlayerController playerController</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!_playerController)</span><br><span class="line">        &#123;</span><br><span class="line">            _playerController = playerController;</span><br><span class="line">        &#125;</span><br><span class="line">        _playerController.CurrentSpeed = _playerController.maxSpeed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (_playerController)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (_playerController.CurrentSpeed &gt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                _playerController.transform.Translate(</span><br><span class="line">                    Time.deltaTime * _playerController.CurrentSpeed * _playerController.CurrentDirection);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ClientState-클래스"><a href="#ClientState-클래스" class="headerlink" title="[ClientState 클래스]"></a>[ClientState 클래스]</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ClientState</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> PlayerController _playerController;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">float</span> _inputHorizontal;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">float</span> _inputVertical;</span><br><span class="line">    <span class="keyword">private</span> Vector3 _direction;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        _playerController = GetComponent&lt;PlayerController&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        _inputHorizontal = Input.GetAxis(<span class="string">&quot;Horizontal&quot;</span>);</span><br><span class="line">        _inputVertical = Input.GetAxis(<span class="string">&quot;Vertical&quot;</span>);</span><br><span class="line"></span><br><span class="line">        _direction = <span class="keyword">new</span> Vector3(_inputHorizontal, <span class="number">0</span>, _inputVertical);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//조건에 따라 상태 전이 메서드 호출</span></span><br><span class="line">        <span class="keyword">if</span>(_direction == Vector3.zero)&#123;</span><br><span class="line">            _playerController.StopPlayer();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(_direction != Vector3.zero) &#123;</span><br><span class="line">            _playerController.WalkPlayer(_direction);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(Input.GetKeyDown(KeyCode.Space)) &#123;</span><br><span class="line">            _playerController.JumpPlayer();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>WalkState를 제외하고 Stop, Jump 도 작성을 해두었지만 WalkState 클래스만 예시로 보여드렸습니다.</p><p>IPlayerState 인터페이스를 생성하고</p><p>WalkState는 IPlayerState를 상속받아 Handle메서드를 구현해두었습니다.</p><p>PlayerController는 클라이언트가 요청한 상태 값을 PlayerStateContext에게 전달,<br>PlayerStateContext는 현재 상태 정보를 보관하도록 작성해두었습니다.</p><p>이렇게 작성해두니 상태별로 관리하기가 수월해진 것이 느껴집니다.</p><p>상태를 수정하려거든 각 상태 클래스 또는 상태를 호출하는 ClientState 클래스의 상태 호출 조건을 수정하면 됩니다.</p><p>상태를 추가하려거든 특정 상태 클래스를 추가, PlayerController클래스에서 전이 메서드 추가,<br>전이 메서드 호출하는 코드 추가를 하면 됩니다.</p><p>이렇게 정리해보니 새로운 상태를 추가하거나, 기존 상태에 대한 변경점이 발생한다면 어느 부분을 추가&#x2F;수정해야하는지 명확해졌습니다.</p><hr><h2 id="State-Pattern의-장단점"><a href="#State-Pattern의-장단점" class="headerlink" title="State Pattern의 장단점"></a>State Pattern의 장단점</h2><h3 id="장점"><a href="#장점" class="headerlink" title="장점"></a>장점</h3><ol><li>상태별로 클래스 관리가 가능합니다.</li><li>유지관리가 수월해집니다.</li></ol><h3 id="단점"><a href="#단점" class="headerlink" title="단점"></a>단점</h3><ol><li>추가할 때마다 상태 클래스를 추가해야하므로 관리해야하는 클래스의 수가 증가합니다.</li><li>상태 전환이 빈번하게 발생한다면 확인 조건이 늘어나므로 코드가 방대해지고 수행 시간이 길어지게 됩니다.</li></ol><p>유니티를 이용하여 상태를 구현하다보면 상태 변경으로 인해 코드가 늘어나고 관리하기 힘들어질 때가 있습니다.</p><p>유니티 내에서는 애니메이터 상태에 추상 클래스인 StateMachineBehaviour 클래스를 상속받은 상태 정의 클래스를 컴포넌트로 추가하여 활용할 수 있습니다.</p><hr><p>[참조]</p><ul><li><a href="https://www.yes24.com/Product/Goods/114854688">유니티로 배우는 게임 디자인 패턴</a></li><li><a href="https://velog.io/@cham/Design-Pattern-%EC%83%81%ED%83%9C-%ED%8C%A8%ED%84%B4State-Pattern">State Pattern</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://eui-young.github.io/categories/Unity/">Unity</category>
      
      <category domain="https://eui-young.github.io/categories/Unity/Design-Pattern/">Design Pattern</category>
      
      
      <category domain="https://eui-young.github.io/tags/Unity/">Unity</category>
      
      <category domain="https://eui-young.github.io/tags/Design-Pattern/">Design Pattern</category>
      
      <category domain="https://eui-young.github.io/tags/State/">State</category>
      
      
      <comments>https://eui-young.github.io/2024/01/05/2024-01-05-[Unity]-State-Pattern/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Object Pooling 패턴</title>
      <link>https://eui-young.github.io/2024/01/03/2024-01-03-[Unity]-Object-Pooling/</link>
      <guid>https://eui-young.github.io/2024/01/03/2024-01-03-[Unity]-Object-Pooling/</guid>
      <pubDate>Tue, 02 Jan 2024 15:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;Unity-Object-Pooling-개요&quot;&gt;&lt;a href=&quot;#Unity-Object-Pooling-개요&quot; class=&quot;headerlink&quot; title=&quot;[Unity] Object Pooling 개요&quot;&gt;&lt;/a&gt;[Unity] Object </description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="Unity-Object-Pooling-개요"><a href="#Unity-Object-Pooling-개요" class="headerlink" title="[Unity] Object Pooling 개요"></a>[Unity] Object Pooling 개요</h2><p>게임 속 플레이어가 몬스터를 처치하기 위해 총알을 발사한다고 한다면 총알을 생성하고 총알을 삭제하는 작업이 반복될 것입니다.</p><p>프레임 속도를 유지하면서 CPU에 부담을 주지 않으려면 빈번하게 파괴되고 생성되는 요소들을 메모리에 할당해두고 있는 것이 좋습니다.</p><p>오브젝트를 미리 생성해두었다가 필요할 때에 사용하고 다시 되돌려놓는 방법을 Object Pooling 패턴이라고 합니다.</p><hr><h2 id="Object-Pooling의-작동원리"><a href="#Object-Pooling의-작동원리" class="headerlink" title="Object Pooling의 작동원리"></a>Object Pooling의 작동원리</h2><ol><li><p>컨테이너 형식의 풀은 초기화된 오브젝트 목록을 메모리에 남겨둡니다.</p></li><li><p>사용자는 사용할 오브젝트 인스턴스를 Pool에 요청할 수 있습니다.</p></li><li><p>만약 주어진 시간 내에 풀 내의 인스턴스가 충분하지 않다면 새로운 인스턴스가 동적으로 생성됩니다.</p></li><li><p>풀을 빠져나간 객체 중 클라이언트에서 더 이상 사용되지 않게되면 풀로 돌아가게 됩니다.</p></li><li><p>이 때, 풀에 공간이 없다면 돌아오려는 객체의 인스턴스를 파괴합니다.</p></li></ol><hr><h2 id="장단점"><a href="#장단점" class="headerlink" title="장단점"></a>장단점</h2><p>Object Pooling 패턴에 대해서는 여러 개발자마다 입장이 다릅니다. </p><p>패턴을 사용할 경우 장단점은 어떤 것이 있을까요?</p><h3 id="장점"><a href="#장점" class="headerlink" title="장점"></a>장점</h3><ol><li><p>메모리 사용률이 예측 가능합니다. 풀을 생성할 때 풀 안에 생성될 오브젝트의 갯수를 미리 지정해두기 때문에 메모리를 어느만큼 사용할지 예측이 가능합니다.</p></li><li><p>오브젝트를 Instantiate, Destroy하는 과정에서 가비지 콜렉터를 호출하게 되면서 프레임 드랍이 발생하는데 해당 작업의 빈도가 줄어들게 됩니다.</p></li></ol><h3 id="단점"><a href="#단점" class="headerlink" title="단점"></a>단점</h3><ol><li><p>메모리를 사용하지 않는 상황에도, 기본적으로 메모리의 공간을 할당하고 있습니다.</p></li><li><p>초기화의 번거로움이 존재합니다. 오브젝트 풀링을 사용할 경우 초기화 코드를 작성해주어야 합니다.</p></li></ol><hr><p>장점만 가지고 있는 패턴은 없는 것 같습니다. 그러므로 상황에 따라 신중하게 패턴을 사용할지 말지 결정해야합니다.</p><p>최적화가 필요한 시점에 어떤 부분에 적용을 시키는 것이 효율이 좋을지 검토해보는 것이 좋을 것 같습니다. </p>]]></content:encoded>
      
      
      <category domain="https://eui-young.github.io/categories/Unity/">Unity</category>
      
      <category domain="https://eui-young.github.io/categories/Unity/Design-Pattern/">Design Pattern</category>
      
      
      <category domain="https://eui-young.github.io/tags/Unity/">Unity</category>
      
      <category domain="https://eui-young.github.io/tags/Object-Pooling/">Object Pooling</category>
      
      
      <comments>https://eui-young.github.io/2024/01/03/2024-01-03-[Unity]-Object-Pooling/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Generic</title>
      <link>https://eui-young.github.io/2024/01/02/2024-01-02-[C]-Generic/</link>
      <guid>https://eui-young.github.io/2024/01/02/2024-01-02-[C]-Generic/</guid>
      <pubDate>Mon, 01 Jan 2024 15:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;C-Generic-이란&quot;&gt;&lt;a href=&quot;#C-Generic-이란&quot; class=&quot;headerlink&quot; title=&quot;[C#] Generic 이란?&quot;&gt;&lt;/a&gt;[C#] Generic 이란?&lt;/h2&gt;&lt;p&gt;제너릭이란 데이터의 타입을 일반화하는 것</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="C-Generic-이란"><a href="#C-Generic-이란" class="headerlink" title="[C#] Generic 이란?"></a>[C#] Generic 이란?</h2><p>제너릭이란 데이터의 타입을 일반화하는 것을 의미합니다.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Method</span>&lt;<span class="title">T</span>&gt; (<span class="params">T parameter1, T parameter2</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    ---내용</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>원래라면 자료형에 관계없이 동일한 작업을 진행해야하는 메소드가 필요할 경우 오버라이딩을 통해 리턴 형식이 다르거나, 다른 종류와 개수의 파라미터를 가지는 메소드를 정의해주어야 했습니다.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Print</span>(<span class="params"><span class="built_in">int</span> num</span>)</span>&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;<span class="subst">&#123;num&#125;</span>&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Print</span>(<span class="params"><span class="built_in">string</span> str</span>)</span>&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;<span class="subst">&#123;str&#125;</span>&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Print</span>(<span class="params"><span class="built_in">float</span> num</span>)</span>&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;<span class="subst">&#123;num&#125;</span>&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>같은 메소드를 여러번 정의하는 것은 여간 번거로운 일이 아닙니다.</p><p>그렇기 때문에 어떤 형식이든 이용할 수 있도록 제너릭으로 일반화 메소드를 정의해주면 간편해집니다.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Print</span>&lt;<span class="title">T</span>&gt; (<span class="params">T Parameter</span>)</span>&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;<span class="subst">&#123;Parameter&#125;</span>&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>제너릭은 코드를 재사용할 때, 형식의 안전성과 성능을 최대화합니다. </p><p>제너릭은 제너릭 클래스로 가장 많이 활용됩니다.</br><br>각 인스턴스에서 클래스에 있는 모든 T는 컴파일할 때 제너릭 형식을 의미하는 메타데이터가 생성됩니다.</p><p>그 후 런타임에 메타데이터를 확인하고 특수화된 제너릭 클래스를 생성합니다.</p><p>이 때 사용된 형식이 값 형식인지 참조 형식인지에 따라 제너릭 클래스를 생성하는 방식이 달라집니다.</p><hr><p><mark style ="background : #f4acb7">값 형식</mark>일 경우</br><br>만약 정수를 사용한다면 매개 변수를 정수로 적절히 대체하여 특수화된 버전의 클래스를 생성합니다.</p><p>프로그램 코드에서 해당 클래스를 정수를 이용하여 다시 사용한다면</br><br>이전에 생성했던 특수화 클래스를 다시 사용합니다.</p><p>하지만 다른 값 형식이 들어온다면, </br><br>다른 버전을 생성하여 적절한 위치에 다른 값 형식을 대체합니다.</p><p><mark style ="background : #f4acb7">참조 형식</mark>일 경우</br><br>런타임에서 MSIL의 매개 변수를 개체 참조로 대체하여 특수화된 제너릭 형식을 만듭니다.</p><p>이후 참조 형식과 관계없이 생성된 형식이 인스턴스화될 때마다</br> 런타임에서 이전에 만든 특수화된 버전의 제너릭 형식을 재사용합니다.</p><p>재사용할 때는 이미 생성된 클래스의 인스턴스를 생성하여 변수가 인스턴스를 참조하게 됩니다.</p>]]></content:encoded>
      
      
      <category domain="https://eui-young.github.io/categories/C/">C#</category>
      
      
      <category domain="https://eui-young.github.io/tags/C/">C#</category>
      
      
      <comments>https://eui-young.github.io/2024/01/02/2024-01-02-[C]-Generic/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Parameter와 ref, out 키워드</title>
      <link>https://eui-young.github.io/2024/01/02/2024-01-02-[C]-Parameter%EC%99%80-ref,-out-%ED%82%A4%EC%9B%8C%EB%93%9C/</link>
      <guid>https://eui-young.github.io/2024/01/02/2024-01-02-[C]-Parameter%EC%99%80-ref,-out-%ED%82%A4%EC%9B%8C%EB%93%9C/</guid>
      <pubDate>Mon, 01 Jan 2024 15:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;C-Parameter-란&quot;&gt;&lt;a href=&quot;#C-Parameter-란&quot; class=&quot;headerlink&quot; title=&quot;[C#] Parameter 란?&quot;&gt;&lt;/a&gt;[C#] Parameter 란?&lt;/h2&gt;&lt;p&gt;Parameter(매개 변수)란 </description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="C-Parameter-란"><a href="#C-Parameter-란" class="headerlink" title="[C#] Parameter 란?"></a>[C#] Parameter 란?</h2><p>Parameter(매개 변수)란 함수를 호출한 곳에서 인수를 전달받아 인수의 값을 함수의 내부에서 사용할 수 있도록 도와주는 변수를 뜻합니다.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">int</span> _num1 = <span class="number">3</span>;</span><br><span class="line">    <span class="built_in">int</span> _num2 = <span class="number">6</span>;</span><br><span class="line">    <span class="built_in">int</span> _sum = Method(_num1,_num2); <span class="comment">//인수 전달</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">public</span> <span class="built_in">int</span> <span class="title">Method</span>(<span class="params"><span class="built_in">int</span> num1, <span class="built_in">int</span> num2</span>) <span class="comment">//매개 변수</span></span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> num1 + num2; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위와 같이 Method를 호출하는 Main함수에서 _num1, _num2를 인수(Argument)로 넘겨주고</br><br>호출된 Method에서 <mark style = "background : #f4acb7">인수</mark> 값을 담고 있는 파라미터인 num1, num2를 이용하여 결과 값을 전달해주고 있습니다.</p><p><code>인수란 함수를 호출할 때 넘겨주는 변수 값입니다.</code></p><hr><h3 id="값-형식-전달-참조-형식-전달"><a href="#값-형식-전달-참조-형식-전달" class="headerlink" title="값 형식 전달, 참조 형식 전달"></a>값 형식 전달, 참조 형식 전달</h3><ol><li>값으로 전달 : 변수의 복사본을 전달</li><li>참조로 전달 : 변수에 대한 주소를 전달</li></ol><table><thead><tr><th>형식</th><th>값으로 전달</th><th>참조로 전달</th></tr></thead><tbody><tr><td>값 형식</td><td>호출자에게 변경 내용이 반영되지 않음</td><td>호출자에게 변경 내용이 반영됨</td></tr><tr><td>참조 형식</td><td>호출자에게 변경 내용이 반영됨</td><td>호출자에게 변경 내용이 반영됨</td></tr></tbody></table><hr><h3 id="Parameter-키워드"><a href="#Parameter-키워드" class="headerlink" title="Parameter 키워드"></a>Parameter 키워드</h3><p>개발자는 필요함에 따라 파라미터 키워드를 사용할 수 있습니다.</br><br>그럼 파라미터 키워드에는 어떤 것들이 있을까요?</p><hr><h4 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h4><p>일반적으로 c#의 인수는 값이 복사되어 호출된 메소드에게 전달됩니다.</p><p>이런 경우 메서드 내에서 매개변수의 값이 수정되어도 호출된 곳에서 변수의 값은 변하지 않습니다.</p><p>메소드에서 변동된 값이 호출한 곳에서도 적용이 되었으면 좋겠다면<br>ref 키워드를 사용하면 됩니다. </p><p><mark style = "background: #f4acb7"> ref 키워드는 reference로 참조에 의한 인수 전달 키워드입니다. </mark></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">Method</span>(<span class="params"><span class="keyword">ref</span> <span class="built_in">int</span> num1, <span class="built_in">int</span> num2</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> num1 + num2; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ref 키워드를 사용하기 위해<br>메소드의 매개변수 앞과, 메소드를 호출할 때 인수 앞에 ref키워드를 명시해주어야 합니다.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">int</span> _num1 = <span class="number">3</span>;</span><br><span class="line">    <span class="built_in">int</span> _num2 = <span class="number">4</span>;</span><br><span class="line">    Method(<span class="keyword">ref</span> _num1,_num2); </span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;Main Start!&quot;</span>);</span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;_num1: <span class="subst">&#123;_num1&#125;</span> , _num2: <span class="subst">&#123;_num2&#125;</span>&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Method</span>(<span class="params"><span class="keyword">ref</span> <span class="built_in">int</span> num1, <span class="built_in">int</span> num2</span>)</span>&#123;</span><br><span class="line">    num1 = num1 + <span class="number">1</span>;</span><br><span class="line">    num2 = num2 + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;Method Start!&quot;</span>);</span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;num1: <span class="subst">&#123;num1&#125;</span> , num2: <span class="subst">&#123;num2&#125;</span>&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>[결과]</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Method Start!</span><br><span class="line">num1: 4 , num2: 5</span><br><span class="line">Main Start!</span><br><span class="line">_num1: 4 , _num2: 4</span><br></pre></td></tr></table></figure><p>결과를 보면 메소드 내에서 num2는 증가되어 5를 가지고 있지만 </br>main 에서 _num2는 증가되지 않는 4의 값을 가지고 있습니다.</p><p>num2와 다르게 _num1은 메소드 내에서 증가한 것이 </br>main에서도 똑같이 증가된 것을 확인할 수 있습니다.</p><hr><h4 id="out"><a href="#out" class="headerlink" title="out"></a>out</h4><p>out은 ref와 비슷하게 참조에 의한 매개변수을 이용할 수 있게 도와주는 키워드입니다.</p><p>사용방식 또한 ref와 같습니다.</p><p>그럼 둘의 다른점은 무엇일까요?</p><p>ref일 경우 인수를 초기화해야하지만,</br><br>초기화가 되었기때문에 호출된 메소드 내에서 새로운 값을 반드시 할당하지 않아도 됩니다. </p><p>out일 경우 인수가 할당되지 않아도 되지만,</br><br>호출된 메소드 내에서 새로운 값을 반드시 할당해주어야 합니다.</p><hr><p>자세한 내용은 <a href="https://learn.microsoft.com/ko-kr/dotnet/csharp/language-reference/keywords/method-parameters">Microsoft c# 가이드</a> 를 참고하시면 됩니다.</p>]]></content:encoded>
      
      
      <category domain="https://eui-young.github.io/categories/C/">C#</category>
      
      
      <category domain="https://eui-young.github.io/tags/C/">C#</category>
      
      <category domain="https://eui-young.github.io/tags/Parameter/">Parameter</category>
      
      
      <comments>https://eui-young.github.io/2024/01/02/2024-01-02-[C]-Parameter%EC%99%80-ref,-out-%ED%82%A4%EC%9B%8C%EB%93%9C/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>자료구조</title>
      <link>https://eui-young.github.io/2023/12/11/2023-12-11-[%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0]-%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0/</link>
      <guid>https://eui-young.github.io/2023/12/11/2023-12-11-[%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0]-%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0/</guid>
      <pubDate>Sun, 10 Dec 2023 15:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;자료구조란&quot;&gt;&lt;a href=&quot;#자료구조란&quot; class=&quot;headerlink&quot; title=&quot;자료구조란?&quot;&gt;&lt;/a&gt;자료구조란?&lt;/h2&gt;&lt;p&gt;자료구조란 데이터의 저장 방법 또는 데이터 관련 연산의 총집합을 의미합니다.&lt;/p&gt;
&lt;p&gt;자료구조는 </description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="자료구조란"><a href="#자료구조란" class="headerlink" title="자료구조란?"></a>자료구조란?</h2><p>자료구조란 데이터의 저장 방법 또는 데이터 관련 연산의 총집합을 의미합니다.</p><p>자료구조는 단순 자료구조, 복합 자료구조, 파일 구조로 나누어 볼 수 있습니다.</p><p><img src="https://github.com/eui-young/eui-young.github.io/assets/56330520/f800a0b9-4c3d-4494-8a83-0ded995a792f" alt="DataStructure"></p><h3 id="단순-자료구조"><a href="#단순-자료구조" class="headerlink" title="단순 자료구조"></a>단순 자료구조</h3><p><mark style = "background: #f4acb7">단순 자료구조</mark>란 기본적으로 제공하는 정수, 실수, 문자를 포함합니다. </p><h3 id="복합-자료구조"><a href="#복합-자료구조" class="headerlink" title="복합 자료구조"></a>복합 자료구조</h3><p>복합 자료구조는 선형구조, 비선형구조로 구분할 수 있습니다.</p><h4 id="선형구조"><a href="#선형구조" class="headerlink" title="선형구조"></a>선형구조</h4><p><mark style = "background: #f4acb7">선형구조</mark>란 데이터 요소를 순차적으로 연결하는 자료구조입니다.</p><ol><li>배열</li><li>링크드 리스트</li><li>스택</li><li>큐</li><li>힙</li></ol><h4 id="비선형구조"><a href="#비선형구조" class="headerlink" title="비선형구조"></a>비선형구조</h4><p><mark style = "background: #f4acb7">비선형구조</mark>란 데이터 요소가 비순차적, 트리 형태로 연결되어있습니다.</p><ol><li>트리</li><li>그래프</li></ol><h3 id="파일구조"><a href="#파일구조" class="headerlink" title="파일구조"></a>파일구조</h3><p><mark style = "background: #f4acb7">파일 구조</mark>는 파일을 저장하는 구조입니다.</p><ol><li>순차 파일구조</li><li>색인 파일구조</li><li>직접 파일구조</li></ol>]]></content:encoded>
      
      
      <category domain="https://eui-young.github.io/categories/DataStructure/">DataStructure</category>
      
      
      <category domain="https://eui-young.github.io/tags/DataStructure/">DataStructure</category>
      
      
      <comments>https://eui-young.github.io/2023/12/11/2023-12-11-[%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0]-%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Comment</title>
      <link>https://eui-young.github.io/2023/12/05/2023-12-05-Comments/</link>
      <guid>https://eui-young.github.io/2023/12/05/2023-12-05-Comments/</guid>
      <pubDate>Mon, 04 Dec 2023 15:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h3 id=&quot;Comment&quot;&gt;&lt;a href=&quot;#Comment&quot; class=&quot;headerlink&quot; title=&quot;Comment&quot;&gt;&lt;/a&gt;Comment&lt;/h3&gt;</description>
        
      
      
      
      <content:encoded><![CDATA[<h3 id="Comment"><a href="#Comment" class="headerlink" title="Comment"></a>Comment</h3>]]></content:encoded>
      
      
      <category domain="https://eui-young.github.io/categories/ETC/">ETC</category>
      
      
      <category domain="https://eui-young.github.io/tags/ETC/">ETC</category>
      
      
      <comments>https://eui-young.github.io/2023/12/05/2023-12-05-Comments/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Quaternion이란</title>
      <link>https://eui-young.github.io/2023/12/04/2023-12-04-[Unity]-Quaternion%EC%9D%B4%EB%9E%80/</link>
      <guid>https://eui-young.github.io/2023/12/04/2023-12-04-[Unity]-Quaternion%EC%9D%B4%EB%9E%80/</guid>
      <pubDate>Sun, 03 Dec 2023 15:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;Quaternion이란&quot;&gt;&lt;a href=&quot;#Quaternion이란&quot; class=&quot;headerlink&quot; title=&quot;Quaternion이란?&quot;&gt;&lt;/a&gt;Quaternion이란?&lt;/h2&gt;&lt;p&gt;안녕하세요. 이번 포스트에서 Quaternion에 </description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="Quaternion이란"><a href="#Quaternion이란" class="headerlink" title="Quaternion이란?"></a>Quaternion이란?</h2><p>안녕하세요. 이번 포스트에서 Quaternion에 대한 내용을 정리해보려고 합니다.</br><br>Unity에서는 오브젝트의 회전 값을 쿼터니언으로 표현하고 있습니다.</p><p>상세한 내용은 <a href="https://docs.unity3d.com/">Unity API 문서</a>를 참고하시길 바랍니다.</p><p>쿼터니언을 사용하는 이유는 Euler의 단점을 개선하기 위해서인데요.</p><p>Euler는 무엇일까요?</p><hr><h3 id="Euler-오일러"><a href="#Euler-오일러" class="headerlink" title="Euler(오일러)"></a>Euler(오일러)</h3><p>Euler란 3차원 공간의 절대 좌표를 기준으로 물체의 회전을 측정하는 방식입니다.</p><p>회전이 일어날 경우 세 축으로 나누어서 계산이 이루어집니다.</p><p>180도가 넘는 회전을 표현할 수 있습니다.</p><p>그 과정에서 짐벌락이라는 문제점이 발생할 수 있습니다.</p><h3 id="짐벌락"><a href="#짐벌락" class="headerlink" title="짐벌락"></a>짐벌락</h3><p><mark style = "background : #f4acb7"> 짐벌락이란</mark> 3개의 축이 순차적으로 회전하는 도중 2개의 축이 겹치는 현상을 뜻합니다.</p><p><img src="https://github.com/eui-young/eui-young.github.io/assets/56330520/02aa62a3-a78b-4eed-b860-eb5adda61a08" alt="gimbal loack"><br>참조 <a href="https://www.researchgate.net/figure/Gimbal-lock-When-the-pitch-Y-rotates-90-degrees-the-roll-X-and-yaw-Z-axes-become_fig14_46720588">https://www.researchgate.net/figure/Gimbal-lock-When-the-pitch-Y-rotates-90-degrees-the-roll-X-and-yaw-Z-axes-become_fig14_46720588</a></p><p>오일러는 x, y, z 축을 기준으로 순차적 회전이 이루어집니다.</p><p>위의 그림에서는 x축 기준으로 회전이 발생하더니 z축과 겹쳐진 것을 확인할 수 있습니다.</p><p>이렇게 두개의 축이 겹쳐지면 y축이 회전할 경우 z축 기준 회전 값이 달라지게 됩니다.</p><h3 id="Quaternion"><a href="#Quaternion" class="headerlink" title="Quaternion"></a>Quaternion</h3><p>Quaternion은 이러한 오일러의 짐벌락 현상을 해결하기 위해 사용됩니다.</p><p>Unity에서 오브젝트의 회전 상태를 나타내는 방식이며 (x, y, z, w)로 표현이 가능합니다.</p><p>각각의 인수는 특정 벡터 (x, y, z)와 벡터의 회전값인 스칼라(w)의 정보를 담고 있습니다.</p><p>Quaternion을 이용한 회전은 다른 축과 관계되어 측정되므로 180도 이상의 회전은 표현이 불가능합니다.</p></br><h2 id="Quaternion-관련-메소드"><a href="#Quaternion-관련-메소드" class="headerlink" title="Quaternion 관련 메소드"></a>Quaternion 관련 메소드</h2><p>앞에서 Quaternion의 개념에 대해 알아보았으니,</br><br>Quaternion을 어떻게 활용할 수 있는지 그와 관련된 메소드들을 알아보도록 하겠습니다.</p><h3 id="Quaternion-identity"><a href="#Quaternion-identity" class="headerlink" title="Quaternion.identity"></a>Quaternion.identity</h3><p><mark style = "background : #f4acb7 ">Quaternion.identity는</mark> </br><br>오브젝트가 최상위 오브젝트일 경우 월드 좌표 기준 회전이 발생하지 않은 기본 값,</br><br>오브젝트가 자식 오브젝트일 경우 부모 좌표 기준 회전이 발생하지 않는 기본 값을 담고 있습니다.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">transform.position = Quaternion.identity;</span><br></pre></td></tr></table></figure><h3 id="Quaternion-eulerAngles"><a href="#Quaternion-eulerAngles" class="headerlink" title="Quaternion.eulerAngles"></a>Quaternion.eulerAngles</h3><p><code>정의: public Vector3 eulerAngles</code></p><p>eulerAngles는 쿼터니언을 오일러로 나타내줍니다.</p><p>원래 오브젝트의 rotation 값은 Quaternion으로 정의 되어있기 때문에 오일러각을 이용하여 값을 수정하는 것이 불가합니다.</p><p>하지만 Quaternion.eulerAngles를 통해 오일러 값을 이용하여 회전 시키는 것이 가능합니다.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Vector3 _curEulerAngles;</span><br><span class="line">Quaternion _curRotation;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span>&#123;</span><br><span class="line">    <span class="comment">//회전하려는 값</span></span><br><span class="line">    _curEulerAngles = <span class="keyword">new</span> Vector3(<span class="number">60</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">//eulerAngles메소드를 통해 오브젝트의 오일러값에 접근해준다.</span></span><br><span class="line">    transform.rotation.eulerAngles = _curEulerAngles;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Quaternion-Euler"><a href="#Quaternion-Euler" class="headerlink" title="Quaternion.Euler"></a>Quaternion.Euler</h3><p><code>정의: public static Quaternion Euler(float x, float y, float z)</code></p><p>오일러 회전 값을 받아 쿼터니언 회전 값으로 리턴해줍니다.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Vector3 _rotVector;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span>&#123;</span><br><span class="line">    _rotVector = <span class="keyword">new</span> Vector3(<span class="number">0</span>,<span class="number">50</span>,<span class="number">00</span>;)</span><br><span class="line">    transform.rotation = Quaternion.Euler(_rotVector);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Quaternion-FromToRotaion"><a href="#Quaternion-FromToRotaion" class="headerlink" title="Quaternion.FromToRotaion"></a>Quaternion.FromToRotaion</h3><p><code>정의: public static Quaternion FromToRotation(Vector3 fromDirection, Vector3 toDirection)</code></p><p>fromDirection에 입력된 벡터를 하나의 축으로 삼아 toDirection의 벡터 축으로 회전시켜줍니다.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Start</span>()</span>&#123;</span><br><span class="line">    transform.rotation = Quaternion.FromToRotation(Verctor3.forward, Vector3.up);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Quaternion-LookRotaion"><a href="#Quaternion-LookRotaion" class="headerlink" title="Quaternion.LookRotaion"></a>Quaternion.LookRotaion</h3><p><code>정의: public static Quaternion LookRotation(Vector3 forward, Vector3 upwards = Vector3.up)</code></p><p>forward는 바라보고 싶은 방향이고, upwards는 오브젝트의 머리가 향하는 방향입니다.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Transform = _otherObject;</span><br><span class="line"><span class="keyword">private</span> Vector3 _relativeDir;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Update</span>()</span>&#123;</span><br><span class="line">    _relativeDir = _otherObject.position - transform.position;</span><br><span class="line">    transform.rotation = Quaternion.LookRotation(_relativeDir, Vector3.up);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위와 같이 작성하게 되면 _relativeDir는 상대오브젝트의 좌표에서 현 오브젝트의 좌표를 빼주었으므로</p><p>현 오브젝트 -&gt; 상대 오브젝트 벡터를 뜻합니다.</p><p>해당 벡터 방향을 바라보면서 현 오브젝트의 머리는 위를 바라볼 수 있도록 작성해준 것입니다.</p><h3 id="Quaternion-RotateTowards"><a href="#Quaternion-RotateTowards" class="headerlink" title="Quaternion.RotateTowards"></a>Quaternion.RotateTowards</h3><p><code>정의: public static Quaternion RotateTowards(Quaternion from, Quaternion to, float maxDegreesDelta)</code></p><p>from 회전값을, to 회전값까지 maxDegressDelta 만큼 회전시킨 회전 결과값을 Quanternion으로 리턴해줍니다.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span>&#123;</span><br><span class="line">    transform.rotation = Quaternion.RotateTowards(transfrom.rotation, _target.rotation, Time.deltaTime * rotSpeed);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이번 포스터는 여기까지 작성하고 마치겠습니다.</p>]]></content:encoded>
      
      
      <category domain="https://eui-young.github.io/categories/Unity/">Unity</category>
      
      
      <category domain="https://eui-young.github.io/tags/Unity/">Unity</category>
      
      
      <comments>https://eui-young.github.io/2023/12/04/2023-12-04-[Unity]-Quaternion%EC%9D%B4%EB%9E%80/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>position,localPosition</title>
      <link>https://eui-young.github.io/2023/12/02/2023-12-02-[Unity]-3d-%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8%EC%9D%98-%EC%9D%B4%EB%8F%99/</link>
      <guid>https://eui-young.github.io/2023/12/02/2023-12-02-[Unity]-3d-%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8%EC%9D%98-%EC%9D%B4%EB%8F%99/</guid>
      <pubDate>Fri, 01 Dec 2023 15:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h3 id=&quot;Unity-position-localPosition&quot;&gt;&lt;a href=&quot;#Unity-position-localPosition&quot; class=&quot;headerlink&quot; title=&quot;[Unity] position, localPosition&quot;&gt;&lt;/a</description>
        
      
      
      
      <content:encoded><![CDATA[<h3 id="Unity-position-localPosition"><a href="#Unity-position-localPosition" class="headerlink" title="[Unity] position, localPosition"></a>[Unity] position, localPosition</h3><p>Unity 3D 오브젝트의 이동에 대해 정리를 해보려고 합니다.</p><p>추가적인 내용을 알아보려면<br><a href="https://docs.unity3d.com/ScriptReference/Transform-position.html">Transform.position</a>, <a href="https://docs.unity3d.com/ScriptReference/Transform-localPosition.html">Transform.localPosition</a> 참고하시면 됩니다.</p><p>말하기에 앞서 예시를 들기 위해 3D 오브젝트인 Cube, Plane을 생성해보겠습니다. </br></p><p align ="left"><img src="https://github.com/eui-young/eui-young.github.io/assets/56330520/6101536a-6e6b-47bf-9cfa-3c884f58c79c" width="300" height="300"/> </p><p>3D 오브젝트의 위치 값은 Transform의 position에 Vector3 ( x, y, z )의 형태로 담겨 있습니다.</p><p align ="left"><img src="https://github.com/eui-young/eui-young.github.io/assets/56330520/214fbbb9-86a9-436e-8adc-3785a4d90359" width  ="600" height ="100"/></p><p>위의 Transform 정보는 Cube Object의 데이터입니다.</p><p>현재 Position은 (0, 1, 0)의 값을 가지고 있습니다.</p><p>해당 오브젝트를 우측으로 이동시켜보겠습니다.</p><p align ="left"><img src="https://github.com/eui-young/eui-young.github.io/assets/56330520/f51c2a57-58e8-40c7-80cc-f5eeae2d2c56" width = "300" height ="300"/> </p><p>오브젝트를 우측으로 이동시키니 Position의 x값의 변화가 있습니다.</p><p align ="left"><img src="https://github.com/eui-young/eui-young.github.io/assets/56330520/1e7b6c7d-92e7-4ab0-ae86-95f0c8680d59" width = "600" height ="100"/></p><p>오브젝트의 위치 이동을 위해서는 Position 값의 변화가 필요하다는 것을 알 수 있습니다.</p><hr><h3 id="3d-오브젝트-방향-벡터"><a href="#3d-오브젝트-방향-벡터" class="headerlink" title="3d 오브젝트 방향 벡터"></a>3d 오브젝트 방향 벡터</h3><p>3D 오브젝트의 간편한 이동을 위해 Unity에는 방향을 나타내는 전역 벡터가 정의되어 있습니다.</p><h4 id="방향-벡터"><a href="#방향-벡터" class="headerlink" title="방향 벡터"></a>방향 벡터</h4><table><thead><tr><th>Direction</th><th>Vector3</th></tr></thead><tbody><tr><td>Vector3.forward</td><td>(0, 0, 1)</td></tr><tr><td>Vector3.back</td><td>(0, 0, -1)</td></tr><tr><td>Vector3.up</td><td>(0, 1, 0)</td></tr><tr><td>Vector3.down</td><td>(0, -1, 0)</td></tr><tr><td>Vector3.right</td><td>(1, 0, 0)</td></tr><tr><td>Vector3.left</td><td>(-1, 0, 0)</td></tr><tr><td>Vector3.zero</td><td>(0, 0, 0)</td></tr><tr><td>Vector3.one</td><td>(1, 1, 1)</td></tr></tbody></table><h4 id="Position"><a href="#Position" class="headerlink" title="Position"></a>Position</h4><p>Position 값을 직접적으로 수정하여 Cube를 이동시키겠습니다.</p><p>아래의 코드가 작성된 스크립트를 Cube 오브젝트의 컴포넌트로 추가하였습니다.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//오브젝트의 이동 속도</span></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">float</span> _moveSpeed = <span class="number">5f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span>&#123;</span><br><span class="line">    <span class="comment">//위로 이동</span></span><br><span class="line">    transform.position += Time.deltaTime * _moveSpeed * Vector3.up;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>[결과]</br></p><p align ="left"><img src ="https://github.com/eui-young/eui-young.github.io/assets/56330520/a30f3187-3685-4b35-af40-6448efa78e65" width ="300" height="300"/></p><p>매 프레임마다 <mark style = "background : #f4acb7"> 프레임이 흐른 시간과 moveSpeed </mark>를 이용하여 Position의 y값을 증가시켰습니다.</p><h4 id="localPosition"><a href="#localPosition" class="headerlink" title="localPosition"></a>localPosition</h4><p>위의 position은 localposition으로도 표현할 수 있는데요.</br><br>position과 localPosition은 어떤 차이가 있는걸까요?</p><p>position은 오브젝트의 위치 좌표를 <mark style = "background :#f4acb7">월드 좌표</mark> 기준으로 가지고 있습니다.</br><br>localPosition은 오브젝트의 위치 좌표를 <mark style = "background :#f4acb7">로컬 좌표</mark> 기준으로 가지고 있습니다.</p><p>월드 좌표와 로컬 좌표의 차이는 무엇일까요?</p><p><b>월드 좌표란 절대적인 좌표를 말합니다.</b></br><br>절대적인 시점에서 바라본 오브젝트의 위치이므로<br>어디에서 오브젝트 위치를 불러와도 항상 같은 값을 가지게 됩니다.</p><p><b>로컬 좌표는 상대적인 좌표를 말합니다.</b></br><br>만약 Cube 오브젝트가 또 다른 오브젝트의 자식 오브젝트로 존재한다면 부모 오브젝트가 이동할 경우 Cube 오브젝트가 같이 이동을 하게 됩니다.</br><br>이때 Cube의 position은 변하지만 localPosition은 변하지 않습니다.</p><p>그런 이유는 Cube 오브젝트의 기준이 부모 오브젝트이기 때문입니다.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//오브젝트의 이동 속도</span></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">float</span> _moveSpeed = <span class="number">5f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span>&#123;</span><br><span class="line">    <span class="comment">//위로 이동</span></span><br><span class="line">    transform.localPosition += Time.deltaTime * _moveSpeed * Vector3.up;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>오른쪽으로 이동하는 기능을 부모 오브젝트에 추가해보겠습니다.</p><p>[Parent Object Position]</p><p><img src="https://github.com/eui-young/eui-young.github.io/assets/56330520/d1d4f682-e5d2-40c9-b5e1-4a8073a88ff6" alt="ParentMove"></p><p>부모 오브젝트인 파란색 Cube를 이동시켜보았습니다.</br><br>우측의 inspector창에 보이는 position은 부모 오브젝트의 position입니다.</br><br>해당 오브젝트는 position 값이 변하는 것을 알 수 있습니다.</p><p>자식오브젝트인 분홍색 Cube의 position은 어떻게 변할까요?</p><p>[Child Object Position]<br><img src="https://github.com/eui-young/eui-young.github.io/assets/56330520/b88ffdde-5d5b-49f5-b59b-cbb20c7b6816" alt="image/Movement2.gif"></p><p>자식 오브젝트의 Position값은 변하지 않습니다.</br><br>이는 특정 오브젝트의 자식형질을 가지게 되면서 인스펙터 창에서 확인할 수 있는 position이 localPosition이기 때문입니다.</p><p>부모 오브젝트를 기준으로 일정한 간격을 두고 이동하기 때문에 localPosition에는 변동이 없는 상태입니다.</p><p>이런 경우에 저희가 눈으로 확인할 수 있는 값은 localPosition이므로 </br></p><p>자식오브젝트 trnasform.position을 이용하여 자식오브젝트를 이동시키는 것과<br>transform.localPosition을 이용하여 이동시키는 것은 차이가 발생하게 됩니다.</p><p>그렇다면 자식 오브젝트를 이동시키기 위해서는 어떤 값을 이용할 수 있을까요?</p><p>이럴 때 사용하는 것이 localPosition입니다.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//오브젝트의 이동 속도</span></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">float</span> _moveSpeed = <span class="number">5f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span>&#123;</span><br><span class="line">    <span class="comment">//위로 이동</span></span><br><span class="line">    transform.localPosition += Time.deltaTime * _moveSpeed * Vector3.up;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>자식 오브젝트를 일정하게 위로 이동시켜보겠습니다.</p><p><img src="https://github.com/eui-young/eui-young.github.io/assets/56330520/8b8320e3-bbb0-453c-b2c8-2ca182cc211d" alt="Movement3"></p><p>자식 오브젝트 position의 y값만 변화가 있는 것을 확인할 수 있습니다.</p><p>이는 자식 오브젝트의 localPosition에 변화를 주고 있기 때문입니다.</p><p>오브젝트의 이동 구현 또는 위치를 수정할 때 position과 localPosition을 적절하게 사용하시면 됩니다.</p>]]></content:encoded>
      
      
      <category domain="https://eui-young.github.io/categories/Unity/">Unity</category>
      
      
      <category domain="https://eui-young.github.io/tags/Unity/">Unity</category>
      
      
      <comments>https://eui-young.github.io/2023/12/02/2023-12-02-[Unity]-3d-%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8%EC%9D%98-%EC%9D%B4%EB%8F%99/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>next 테마를 이용하여 hexo 블로그 만들기</title>
      <link>https://eui-young.github.io/2023/12/02/2023-12-02-[hexo]-next-%ED%85%8C%EB%A7%88%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%98%EC%97%AC-hexo-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%A7%8C%EB%93%A4%EA%B8%B0/</link>
      <guid>https://eui-young.github.io/2023/12/02/2023-12-02-[hexo]-next-%ED%85%8C%EB%A7%88%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%98%EC%97%AC-hexo-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%A7%8C%EB%93%A4%EA%B8%B0/</guid>
      <pubDate>Fri, 01 Dec 2023 15:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h3 id=&quot;Node-js-설치&quot;&gt;&lt;a href=&quot;#Node-js-설치&quot; class=&quot;headerlink&quot; title=&quot;Node.js 설치&quot;&gt;&lt;/a&gt;Node.js 설치&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://nodejs.org/en/downloa</description>
        
      
      
      
      <content:encoded><![CDATA[<h3 id="Node-js-설치"><a href="#Node-js-설치" class="headerlink" title="Node.js 설치"></a>Node.js 설치</h3><p><a href="https://nodejs.org/en/download/current">Node.js</a>에서 본인 컴퓨터에 적합한 프로그램을 설치합니다.</p><h3 id="hexo-설치"><a href="#hexo-설치" class="headerlink" title="hexo 설치"></a>hexo 설치</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm insall hexo-cli -g</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="hexo-블로그-폴더-생성-및-설정"><a href="#hexo-블로그-폴더-생성-및-설정" class="headerlink" title="hexo 블로그 폴더 생성 및 설정"></a>hexo 블로그 폴더 생성 및 설정</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init blog // blog 폴더가 생성됩니다. (blog 위치에 원하는 폴더명을 입력해주시면 됩니다.)</span><br><span class="line">$ <span class="built_in">cd</span> blog //새로 생성된 blog 폴더 위치로 이동합니다.</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure><h3 id="hexo-블로그-테마-불러오기"><a href="#hexo-블로그-테마-불러오기" class="headerlink" title="hexo 블로그 테마 불러오기"></a>hexo 블로그 테마 불러오기</h3><h4 id="hexo를-이용하여-테마-불러오기"><a href="#hexo를-이용하여-테마-불러오기" class="headerlink" title="hexo를 이용하여 테마 불러오기"></a>hexo를 이용하여 테마 불러오기</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-theme-next</span><br></pre></td></tr></table></figure><h4 id="git-clone을-이용하여-테마-불러오기"><a href="#git-clone을-이용하여-테마-불러오기" class="headerlink" title="git clone을 이용하여 테마 불러오기"></a>git clone을 이용하여 테마 불러오기</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><h3 id="블로그-폴더-config-yml-파일에서-theme-테마명으로-수정"><a href="#블로그-폴더-config-yml-파일에서-theme-테마명으로-수정" class="headerlink" title="(블로그 폴더)&#x2F;_config.yml 파일에서 theme : 테마명으로 수정"></a>(블로그 폴더)&#x2F;_config.yml 파일에서 theme : 테마명으로 수정</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 저는 next theme을 설치하였으므로 next로 수정하겠습니다.</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">next</span> </span><br></pre></td></tr></table></figure><h3 id="블로그-폴더-config-yml-내용-추가적으로-수정"><a href="#블로그-폴더-config-yml-내용-추가적으로-수정" class="headerlink" title="(블로그 폴더)&#x2F;_config.yml 내용 추가적으로 수정"></a>(블로그 폴더)&#x2F;_config.yml 내용 추가적으로 수정</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">zerone</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">개발</span> <span class="string">일지</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">화이팅</span> <span class="string">!</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">zerone</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/eui-young/eui-young.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="새-포스트파일-생성"><a href="#새-포스트파일-생성" class="headerlink" title="새 포스트파일 생성"></a>새 포스트파일 생성</h3><p>(블로그폴더)&#x2F;source&#x2F; 폴더안에 _post폴더를 생성합니다.</br><br>_post 폴더 안에 포스트 파일을 작성하여 넣어주세요.</p><p>예시로 저는</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line"><span class="attr">layout</span>: post</span><br><span class="line"><span class="attr">title</span>: 포스트 제목</span><br><span class="line"><span class="attr">date</span>: <span class="number">2023</span>-<span class="number">12</span>-<span class="number">02</span></span><br><span class="line"><span class="attr">categorys</span>: hexo</span><br><span class="line"><span class="attr">tags</span>: [hexo]</span><br><span class="line"><span class="attr">comments</span>: <span class="literal">true</span></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">내용 작성...</span><br></pre></td></tr></table></figure><p>작성하였습니다.</p><h3 id="정적-파일-생성-Generate-static-files"><a href="#정적-파일-생성-Generate-static-files" class="headerlink" title="정적 파일 생성 (Generate static files )"></a>정적 파일 생성 (Generate static files )</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="로컬-서버-구동"><a href="#로컬-서버-구동" class="headerlink" title="로컬 서버 구동"></a>로컬 서버 구동</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-server --save //hexo server 설치</span><br><span class="line">$ hexo server // 또는 hexo s</span><br></pre></td></tr></table></figure><p>로컬 서버 구동 후 localhost:4000 에 접속하여 수정사항이 제대로 적용되었는지 확인합니다.</br><br>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="git-레포지터리에-파일-적용"><a href="#git-레포지터리에-파일-적용" class="headerlink" title="git 레포지터리에 파일 적용"></a>git 레포지터리에 파일 적용</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save //설치 후 deploy가 가능합니다.</span><br><span class="line">$ hexo deploy // hexo d -g   generate 후 deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h3 id="적용-완료"><a href="#적용-완료" class="headerlink" title="적용 완료"></a>적용 완료</h3><p>deploy완료 후 deploy 연결 레포지터리에 업로드가 정상적으로 완료되었다면 블로그에 접속하여 변경사항을 확인해주세요.</p>]]></content:encoded>
      
      
      <category domain="https://eui-young.github.io/categories/hexo/">hexo</category>
      
      
      <category domain="https://eui-young.github.io/tags/hexo/">hexo</category>
      
      
      <comments>https://eui-young.github.io/2023/12/02/2023-12-02-[hexo]-next-%ED%85%8C%EB%A7%88%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%98%EC%97%AC-hexo-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%A7%8C%EB%93%A4%EA%B8%B0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Serialization, Deserialization</title>
      <link>https://eui-young.github.io/2023/11/26/2023-11-26-[C]-Serialization,Deserialization/</link>
      <guid>https://eui-young.github.io/2023/11/26/2023-11-26-[C]-Serialization,Deserialization/</guid>
      <pubDate>Sat, 25 Nov 2023 15:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;C-Serialization-Deserialization&quot;&gt;&lt;a href=&quot;#C-Serialization-Deserialization&quot; class=&quot;headerlink&quot; title=&quot;[C#] Serialization, Deserializ</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="C-Serialization-Deserialization"><a href="#C-Serialization-Deserialization" class="headerlink" title="[C#] Serialization, Deserialization"></a>[C#] Serialization, Deserialization</h1><p>유니티로 종스크롤 슈팅게임을 만들면서 데이터를 저장하고, 불러오는 과정이 있었다.</p><p>Json 파일로 데이터를 저장해주었고  DataManager라는 클래스를 통하여 데이터를 불러오고, 저장을 해주었다.</p><p>이 과정에서 Deserialization, Serialization 즉, 직렬화와 역직렬화 과정을 통해 데이터를 관리하였다.</p><h3 id="Serialization"><a href="#Serialization" class="headerlink" title=" Serialization "></a><mark style = "background : #f4acb7"> Serialization </mark></h3><p>직렬화는 객체의 형태로 존재하는 데이터를 연속적인 데이터로 변형하는 것이다.</p><p>“name” : “euiyoung”,</p><p>“age” : 24,</p><p>“gender” : “woman”</p><p>key - value 의 객체 상태로 존재하는 위 데이터를</p><table><thead><tr><th>“euiyoung”</th><th align="left">24</th><th>“woman”</th></tr></thead></table><p>형태로 만들어준다.</p><p>데이터를 저장하거나 데이터를 전송할 때 직렬화 과정을 거친다.</p><h3 id="Deserialization"><a href="#Deserialization" class="headerlink" title=" Deserialization "></a><mark style = "background : #f4acb7"> Deserialization </mark></h3><p>역직렬화라고 일컫으며 직렬화된 데이터를 객체의 형태로 만드는 것을 의미하는 것이다.</p><p>스트림 데이터를 읽어 원래의 객체 형태로 복원을 하는 것으로</p><p>특정 데이터를 불러올 때 역직렬화 과정을 거친다.</p><table><thead><tr><th>“euiyoung”</th><th>24</th><th>“woman”</th></tr></thead></table><p>“name” : “euiyoung”,</p><p>“age” : 24,</p><p>“gender” : “woman”</p><p>위의 연속적인 데이터를 아래의 객체로 변형하는 과정이다.</p>]]></content:encoded>
      
      
      <category domain="https://eui-young.github.io/categories/C/">C#</category>
      
      
      <category domain="https://eui-young.github.io/tags/C/">C#</category>
      
      
      <comments>https://eui-young.github.io/2023/11/26/2023-11-26-[C]-Serialization,Deserialization/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>GetComponentsInChildren</title>
      <link>https://eui-young.github.io/2022/06/15/2022-06-15-[Unity]-GetComponentsInChildren/</link>
      <guid>https://eui-young.github.io/2022/06/15/2022-06-15-[Unity]-GetComponentsInChildren/</guid>
      <pubDate>Tue, 14 Jun 2022 15:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;Unity-GetComponentsInChildren&quot;&gt;&lt;a href=&quot;#Unity-GetComponentsInChildren&quot; class=&quot;headerlink&quot; title=&quot;[Unity] GetComponentsInChildren&quot;&gt;&lt;</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="Unity-GetComponentsInChildren"><a href="#Unity-GetComponentsInChildren" class="headerlink" title="[Unity] GetComponentsInChildren"></a>[Unity] GetComponentsInChildren</h1><p>한 오브젝트의 자식 오브젝트들의 배열로 불러오고 싶을때</p><p><mark style='background-color:  #f4acb7'>GetComponentsInChildren</mark> 을 이용하는데</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GameObject ParentObject;</span><br><span class="line">GameObject[] childrenObject;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">&#123; childrenObject=ParentObject.GetComponentsInChildren&lt;GameObject&gt;(<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이렇게 사용하니 다음 오류가 발생했다.</p><p><code>ArgumentException: GetComponent requires that the requested component &#39;GameObject&#39; derives from MonoBehaviour or Component or is an interface</code></p><p>GameObject는 MonoBehaviour의 클래스에서 컴포넌트로 사용되지 않기 때문에</p><p><mark style='background-color:#f4acb7'>GetComponentsInChildren&lt;GameObject&gt;</MARK>를 사용하지 못한다는 것이다.</p><p>그렇기 때문에  다음과 같이 GameObject의 컴포넌트를 사용해주어야 한다.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GameObject ParentObject;</span><br><span class="line">Transform[] childrenObject;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">&#123; childrenObject=ParentObject.GetComponentsInChildren&lt;Transform&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>또한 GetCompoentsInChildren은 해당 오브젝트나 자식 오브젝트가 비활성화 상태일 때 이용할 수가 없다.</p><p>하지만 GetComponentsInChildren<T>()는 includeInactive라는 매개변수를 가지며 디폴트값으로는 false를 가진다.</p><p><mark style='background-color:#f4acb7'>GetComponentsInChildren(true)</mark></p><p>includeInactive 값을 true로 넘겨준다면 비활성화 되어있는 자식 오브젝트들을 이용할 수 있다.</p><p><code>참고 https://foxtrotin.tistory.com/145 </code></p>]]></content:encoded>
      
      
      <category domain="https://eui-young.github.io/categories/Unity/">Unity</category>
      
      
      <category domain="https://eui-young.github.io/tags/Unity/">Unity</category>
      
      
      <comments>https://eui-young.github.io/2022/06/15/2022-06-15-[Unity]-GetComponentsInChildren/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>부모, 자식 오브젝트 동시에 투명화시키기</title>
      <link>https://eui-young.github.io/2022/05/13/2022-05-13-[Unity]-%EB%B6%80%EB%AA%A8,-%EC%9E%90%EC%8B%9D-%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8-%EB%8F%99%EC%8B%9C%EC%97%90-%ED%88%AC%EB%AA%85%ED%99%94/</link>
      <guid>https://eui-young.github.io/2022/05/13/2022-05-13-[Unity]-%EB%B6%80%EB%AA%A8,-%EC%9E%90%EC%8B%9D-%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8-%EB%8F%99%EC%8B%9C%EC%97%90-%ED%88%AC%EB%AA%85%ED%99%94/</guid>
      <pubDate>Thu, 12 May 2022 15:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;Unity-부모-자식-오브젝트-동시에-투명화시키기&quot;&gt;&lt;a href=&quot;#Unity-부모-자식-오브젝트-동시에-투명화시키기&quot; class=&quot;headerlink&quot; title=&quot;[Unity] 부모, 자식 오브젝트 동시에 투명화시키기&quot;&gt;&lt;/a&gt;[U</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="Unity-부모-자식-오브젝트-동시에-투명화시키기"><a href="#Unity-부모-자식-오브젝트-동시에-투명화시키기" class="headerlink" title="[Unity] 부모, 자식 오브젝트 동시에 투명화시키기"></a>[Unity] 부모, 자식 오브젝트 동시에 투명화시키기</h1><p>이미지를 부모 오브젝트로 두고 버튼을 자식 오브젝트로 두었을 때,</p><p>이미지의 투명도를 조절해도 버튼의 투명도는 변하지 않는다.</p><p>자식 오브젝트의 알파 값을 부모 오브젝트의 알파 값과 똑같이 바꾸고 싶다면 </p><p>부모 오브젝트 컴포넌트에 <mark style='background-color:  #f4acb7'>Canvas  Group</mark> 를 추가해주고 Canvas Group Alpha값을 바꾸어 주면 된다.</p><p><img src="https://user-images.githubusercontent.com/56330520/168248115-b0c4c561-e6fa-4120-a452-1c840ec11aa4.PNG" alt="Canvas Group"></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GameObject ParentObject;</span><br><span class="line">ParentObject.GetComponent&lt;CanvasGroup&gt;().Alpha= <span class="number">0.5f</span>;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://eui-young.github.io/categories/Unity/">Unity</category>
      
      
      <category domain="https://eui-young.github.io/tags/Unity/">Unity</category>
      
      
      <comments>https://eui-young.github.io/2022/05/13/2022-05-13-[Unity]-%EB%B6%80%EB%AA%A8,-%EC%9E%90%EC%8B%9D-%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8-%EB%8F%99%EC%8B%9C%EC%97%90-%ED%88%AC%EB%AA%85%ED%99%94/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>UI 클릭 시 다른 오브젝트가 클릭될 때</title>
      <link>https://eui-young.github.io/2022/05/12/2022-05-12-[Unity]-UI-%ED%81%B4%EB%A6%AD-%EC%8B%9C-%EB%8B%A4%EB%A5%B8-%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8%EA%B0%80-%ED%81%B4%EB%A6%AD%EB%90%A0-%EB%95%8C/</link>
      <guid>https://eui-young.github.io/2022/05/12/2022-05-12-[Unity]-UI-%ED%81%B4%EB%A6%AD-%EC%8B%9C-%EB%8B%A4%EB%A5%B8-%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8%EA%B0%80-%ED%81%B4%EB%A6%AD%EB%90%A0-%EB%95%8C/</guid>
      <pubDate>Wed, 11 May 2022 15:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;Unity-UI-클릭-시-다른-오브젝트가-클릭될-때&quot;&gt;&lt;a href=&quot;#Unity-UI-클릭-시-다른-오브젝트가-클릭될-때&quot; class=&quot;headerlink&quot; title=&quot;[Unity] UI 클릭 시 다른 오브젝트가 클릭될 때&quot;&gt;&lt;/a&gt;</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="Unity-UI-클릭-시-다른-오브젝트가-클릭될-때"><a href="#Unity-UI-클릭-시-다른-오브젝트가-클릭될-때" class="headerlink" title="[Unity] UI 클릭 시 다른 오브젝트가 클릭될 때"></a>[Unity] UI 클릭 시 다른 오브젝트가 클릭될 때</h1><p>클릭이벤트를 이용하는 오브젝트 위에 안내 메시지창을 뜨게 하거나, 이미지가 뜰 경우</p><p>UI에 막혀 클릭이 안될거라고 생각한 오브젝트가 클릭 이벤트를 처리하는 상황이 발생할 수 있다.</p><p>이럴 땐</p><h3 id="①-Inspector창에서-사용되는-Image의-Raycast-Target을-체크해준다"><a href="#①-Inspector창에서-사용되는-Image의-Raycast-Target을-체크해준다" class="headerlink" title="① Inspector창에서 사용되는 Image의 Raycast Target을 체크해준다."></a>① Inspector창에서 사용되는 Image의 Raycast Target을 체크해준다.</h3><img src="https://user-images.githubusercontent.com/56330520/168060976-460accd8-a6eb-488a-bd97-1c6b48925b74.PNG"  /><p> <mark style='background-color:  #f4acb7'>Raycast Target</mark>은 z축 방향으로 ray를 쏠 때 광선이 닿는대상이 될 것인지 아닌지를 결정한다.</p><h3 id="②-마우스-클릭-처리를-하는-코드를-작성할-때-IsPointerOverGameObject-를-이용해준다"><a href="#②-마우스-클릭-처리를-하는-코드를-작성할-때-IsPointerOverGameObject-를-이용해준다" class="headerlink" title="② 마우스 클릭 처리를 하는 코드를 작성할 때 IsPointerOverGameObject()를 이용해준다."></a>② 마우스 클릭 처리를 하는 코드를 작성할 때 IsPointerOverGameObject()를 이용해준다.</h3><p><mark style='background-color:  #f4acb7'> IsPointerOverGameObject()</mark>는 UI가 클릭되면 True, 그렇지 않다면 false를 반환한다.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine.EventSystems;</span><br></pre></td></tr></table></figure><p>마우스 클릭을 처리하는 부분에 IsPointerOverGameObject() 메소드를 이용하여 작성해주면 된다.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnMouseDown</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(!EventSystem.current.IsPointerOverGameObject())</span><br><span class="line">    &#123;</span><br><span class="line"><span class="comment">//입력 처리 내용</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://eui-young.github.io/categories/Unity/">Unity</category>
      
      
      <category domain="https://eui-young.github.io/tags/Unity/">Unity</category>
      
      
      <comments>https://eui-young.github.io/2022/05/12/2022-05-12-[Unity]-UI-%ED%81%B4%EB%A6%AD-%EC%8B%9C-%EB%8B%A4%EB%A5%B8-%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8%EA%B0%80-%ED%81%B4%EB%A6%AD%EB%90%A0-%EB%95%8C/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>list 관련 메소드</title>
      <link>https://eui-young.github.io/2021/09/25/2021-09-25-[C]-list-%EA%B4%80%EB%A0%A8-%EB%A9%94%EC%86%8C%EB%93%9C/</link>
      <guid>https://eui-young.github.io/2021/09/25/2021-09-25-[C]-list-%EA%B4%80%EB%A0%A8-%EB%A9%94%EC%86%8C%EB%93%9C/</guid>
      <pubDate>Fri, 24 Sep 2021 15:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;List-관련-메소드&quot;&gt;&lt;a href=&quot;#List-관련-메소드&quot; class=&quot;headerlink&quot; title=&quot;List 관련 메소드&quot;&gt;&lt;/a&gt;List 관련 메소드&lt;/h1&gt;&lt;h2 id=&quot;List생성&quot;&gt;&lt;a href=&quot;#List생성&quot; cla</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="List-관련-메소드"><a href="#List-관련-메소드" class="headerlink" title="List 관련 메소드"></a>List 관련 메소드</h1><h2 id="List생성"><a href="#List생성" class="headerlink" title="List생성"></a>List생성</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List &lt;<span class="built_in">int</span>&gt; num1 = <span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt;();</span><br><span class="line">List &lt;<span class="built_in">int</span>&gt; num2 = <span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt;()&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">List &lt;<span class="built_in">int</span>&gt; num3 = <span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt;(num2); <span class="comment">//contains: 1,2,3</span></span><br><span class="line">List &lt;<span class="built_in">int</span>&gt; num4 = <span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt;(<span class="number">10</span>); <span class="comment">//capacity:10</span></span><br></pre></td></tr></table></figure><h2 id="Add"><a href="#Add" class="headerlink" title="Add"></a>Add</h2><hr><h3 id="Add-1"><a href="#Add-1" class="headerlink" title="Add"></a><strong>Add</strong></h3><p>List에 원소를 추가</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;<span class="built_in">int</span>&gt; num=<span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt;();</span><br><span class="line">num.Add(<span class="number">2</span>); <span class="comment">// contains: 1</span></span><br></pre></td></tr></table></figure><h3 id="AddRange"><a href="#AddRange" class="headerlink" title="AddRange"></a><strong>AddRange</strong></h3><p>List 끝에 배열 추가</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">num.AddRange(b); <span class="comment">// contains: 1, 4, 2, 5, 6</span></span><br></pre></td></tr></table></figure><h3 id="Insert"><a href="#Insert" class="headerlink" title="Insert"></a><strong>Insert</strong></h3><p>List 중간에 원소 삽입</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">num.Add(<span class="number">1</span>); <span class="comment">// contains: 1</span></span><br><span class="line">num.Add(<span class="number">2</span>); <span class="comment">// contains: 1, 2</span></span><br><span class="line">num.Insert(<span class="number">1</span>,<span class="number">4</span>) <span class="comment">// contains: 1 ,4, 2</span></span><br></pre></td></tr></table></figure><h3 id="InsertRange"><a href="#InsertRange" class="headerlink" title="InsertRange"></a><strong>InsertRange</strong></h3><p>List 중간에 배열 추가</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span>[] b= <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">2</span>];</span><br><span class="line">b[<span class="number">0</span>]=<span class="number">5</span>;</span><br><span class="line">b[<span class="number">1</span>]=<span class="number">6</span>;</span><br><span class="line">num.InsertRange(<span class="number">1</span>,b); <span class="comment">// contains: 1, 5, 6, 4, 2 </span></span><br></pre></td></tr></table></figure><p><code>InsertRange(n, name)</code>  </p><p>n: 특정 배열을 삽입하고 싶은 시작 지점</p><p>name: 삽입하고 싶은 배열명</p><h2 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h2><hr><h3 id="Clear"><a href="#Clear" class="headerlink" title="Clear"></a><strong>Clear</strong></h3><p>List 모든 원소 삭제</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">num.clear(); <span class="comment">//empty</span></span><br></pre></td></tr></table></figure><h3 id="Remove"><a href="#Remove" class="headerlink" title="Remove"></a><strong>Remove</strong></h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">num.Remove(<span class="number">4</span>); <span class="comment">// contains: 1,2</span></span><br></pre></td></tr></table></figure><p><code>Remove(item)</code>  삭제하고 싶은 원소를 쓰면 된다 !</p><h3 id="RemoveAll"><a href="#RemoveAll" class="headerlink" title="RemoveAll"></a><strong>RemoveAll</strong></h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">num <span class="comment">// contains: 1,4,2</span></span><br><span class="line">num.RemoveAll(x=&gt; x&lt;<span class="number">2</span>); <span class="comment">// contains: 4,2</span></span><br></pre></td></tr></table></figure><p><code>RemoveAll(필요한 조건)</code>  해당 조건을 만족하는 원소를 삭제</p><p><code>RemoveAll(x=&gt; true)</code> 모든 원소가 삭제</p><h3 id="RemoveAt"><a href="#RemoveAt" class="headerlink" title="RemoveAt"></a><strong>RemoveAt</strong></h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">num <span class="comment">// contains: 1,4,2</span></span><br><span class="line">num.RemoveAt(<span class="number">1</span>) <span class="comment">// contains: 1,2</span></span><br></pre></td></tr></table></figure><p><code>RemoveAt(num)</code> num에 해당하는 index의 원소 삭제</p><h2 id="Etc"><a href="#Etc" class="headerlink" title="Etc"></a>Etc</h2><hr><h3 id="Contains"><a href="#Contains" class="headerlink" title="Contains"></a><strong>Contains</strong></h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">num <span class="comment">// contains:1,4,2 </span></span><br><span class="line">num.Contains(<span class="number">1</span>); <span class="comment">// 1인 원소가 존재하므로 true</span></span><br></pre></td></tr></table></figure><h3 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a><strong>Reverse</strong></h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">num.Reverse() <span class="comment">//num:2,4,1</span></span><br></pre></td></tr></table></figure><h3 id="Sort"><a href="#Sort" class="headerlink" title="Sort"></a><strong>Sort</strong></h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">num.Sort() <span class="comment">//num: 1,2,4 작은 순서대로</span></span><br></pre></td></tr></table></figure><h3 id="ToArray"><a href="#ToArray" class="headerlink" title="ToArray"></a><strong>ToArray</strong></h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span>[] array= num.ToArray(); <span class="comment">//array:1,4,2</span></span><br></pre></td></tr></table></figure><hr>]]></content:encoded>
      
      
      <category domain="https://eui-young.github.io/categories/C/">C#</category>
      
      
      <category domain="https://eui-young.github.io/tags/list/">list</category>
      
      <category domain="https://eui-young.github.io/tags/C/">C#</category>
      
      
      <comments>https://eui-young.github.io/2021/09/25/2021-09-25-[C]-list-%EA%B4%80%EB%A0%A8-%EB%A9%94%EC%86%8C%EB%93%9C/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>GetComponent, FindObjectOfType</title>
      <link>https://eui-young.github.io/2021/09/25/2021-09-25-[Unity]-GetComponent,-FindObjectOfType/</link>
      <guid>https://eui-young.github.io/2021/09/25/2021-09-25-[Unity]-GetComponent,-FindObjectOfType/</guid>
      <pubDate>Fri, 24 Sep 2021 15:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;GetComponent-FindObjectOfType&quot;&gt;&lt;a href=&quot;#GetComponent-FindObjectOfType&quot; class=&quot;headerlink&quot; title=&quot;GetComponent, FindObjectOfType&quot;&gt;&lt;/</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="GetComponent-FindObjectOfType"><a href="#GetComponent-FindObjectOfType" class="headerlink" title="GetComponent, FindObjectOfType"></a>GetComponent, FindObjectOfType</h1><h3 id="GetComponet"><a href="#GetComponet" class="headerlink" title="GetComponet"></a>GetComponet</h3><p> 특정 object의 component를 찾음</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GameObject <span class="built_in">object</span>;</span><br><span class="line"><span class="built_in">object</span>.GetComponent&lt;SpriteRenderer&gt;();</span><br><span class="line"><span class="comment">//object의 component인 SpriteRenderer을 찾음</span></span><br></pre></td></tr></table></figure><h3 id="FindObjectOfType"><a href="#FindObjectOfType" class="headerlink" title="FindObjectOfType"></a>FindObjectOfType</h3><p>hierarchy창에 있는 모든 object들을 검색 <code>검색된 object script 함수 사용</code></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GameManager gameManager = FindObjectOfType&lt;objectManager&gt;();</span><br><span class="line"><span class="comment">//object의 script인 objectManager를 찾음</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://eui-young.github.io/categories/Unity/">Unity</category>
      
      
      <category domain="https://eui-young.github.io/tags/Unity/">Unity</category>
      
      <category domain="https://eui-young.github.io/tags/GetComponent/">GetComponent</category>
      
      <category domain="https://eui-young.github.io/tags/FindObjectOfType/">FindObjectOfType</category>
      
      
      <comments>https://eui-young.github.io/2021/09/25/2021-09-25-[Unity]-GetComponent,-FindObjectOfType/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
